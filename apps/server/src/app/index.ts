import { CanDataId, CanOutput, SocketTopic } from '@kater-speedo/types';
import { calculateRPM } from './calculators/rpm-calculator';
import { calculateTemperature } from './calculators/temperature-calculator';
import { canEvents, startCanReading } from './parsers/can';
import { SocketServer } from './socket';
import { NoiseReducer } from './utils/noise-reducer';

export function start() {
  const temperatureNoiseReducer = new NoiseReducer({
    initialValue: 0,
    sampleCount: 5,
  });
  const rpmNoiseReducer = new NoiseReducer({
    initialValue: 0,
    sampleCount: 5,
  });
  let temp: number;
  let rpm: number;

  let speed: number;
  let fuel: number;
  let leg: number;

  const socketServer = SocketServer.getInstance();

  let tempCurMockIndex = 0;
  let rpmCurMockIndex = 0;
  let speedCurMockIndex = 0;
  let fuelCurMockIndex = 0;
  let legCurMockIndex = 0;

  temperatureNoiseReducer.events.on('changed', (value: number) => {
    socketServer.sendMessage(SocketTopic.Temperature, value);
  });

  rpmNoiseReducer.events.on('changed', (value: number) => {
    socketServer.sendMessage(SocketTopic.RPM, value);
  });

  startCanReading();
  canEvents.on('data', (data: CanOutput) => {
    switch (data.id) {
      case CanDataId.Temperature:
        // temperatureNoiseReducer.next(calculateTemperature(data));
        temperatureNoiseReducer.next(tempMock[tempCurMockIndex]);
        tempCurMockIndex++;
        if (tempCurMockIndex === tempMock.length - 1) {
          tempCurMockIndex = 0;
        }

        rpmNoiseReducer.next(rpmMock[rpmCurMockIndex]);
        rpmCurMockIndex++;
        if (rpmCurMockIndex === rpmMock.length - 1) {
          rpmCurMockIndex = 0;
        }

        speedCurMockIndex++;
        if (speedCurMockIndex === speedMock.length - 1) {
          speedCurMockIndex = 0;
        }
        if (speedMock[speedCurMockIndex] !== speed) {
          speed = speedMock[speedCurMockIndex];
          socketServer.sendMessage(SocketTopic.Speed, speed);
        }

        fuelCurMockIndex++;
        if (fuelCurMockIndex === fuelMock.length - 1) {
          fuelCurMockIndex = 0;
        }
        if (fuelMock[fuelCurMockIndex] !== fuel) {
          fuel = fuelMock[fuelCurMockIndex];
          socketServer.sendMessage(SocketTopic.Fuel, fuel);
        }

        legCurMockIndex++;
        if (legCurMockIndex === legMock.length - 1) {
          legCurMockIndex = 0;
        }
        if (legMock[legCurMockIndex] !== leg) {
          leg = legMock[legCurMockIndex];
          socketServer.sendMessage(SocketTopic.Trim, leg);
        }
        break;
      // case CanDataId.RPM:
      // rpm = Number(calculateRPM(data).toFixed(0));
      // socketServer.sendMessage(SocketTopic.RPM, rpm);
      // break;

      default:
        break;
    }

    // clearLines(4);
    // process.stdout.write(`===================================\n`);
    // process.stdout.write(`TEMPERATURE: ${temp}\n`);
    // process.stdout.write(`RPM:         ${rpm}\n`);
    // process.stdout.write(`===================================`);
  });
}

function clearLines(n: number) {
  for (let i = 0; i < n; i++) {
    const y = i === 0 ? null : -1;
    process.stdout.moveCursor(0, y);
    process.stdout.clearLine(1);
  }
  process.stdout.cursorTo(0);
}

const tempMock = [
  0, 0, 0, -1, 1, 1, 1, -2, 2, 2, 2, -1, 3, 3, 3, 4, 4, 4, 4, 8, 5, 5, 5, 2, 6,
  6, 6, 3, 7, 7, 7, 9, 8, 8, 8, 7, 9, 9, 9, 6, 10, 10, 10, 12, 11, 11, 11, 15,
  12, 12, 12, 14, 13, 13, 13, 11, 14, 14, 14, 13, 15, 15, 15, 10, 16, 16, 16,
  14, 17, 17, 17, 14, 18, 18, 18, 15, 19, 19, 19, 15, 20, 20, 20, 22, 21, 21,
  21, 17, 22, 22, 22, 19, 23, 23, 23, 23, 24, 24, 24, 20, 25, 25, 25, 22, 26,
  26, 26, 24, 27, 27, 27, 23, 28, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 26,
  31, 31, 31, 33, 32, 32, 32, 30, 33, 33, 33, 36, 34, 34, 34, 33, 35, 35, 35,
  30, 36, 36, 36, 40, 37, 37, 37, 38, 38, 38, 38, 35, 39, 39, 39, 34, 40, 40,
  40, 39, 41, 41, 41, 36, 42, 42, 42, 42, 43, 43, 43, 44, 44, 44, 44, 40, 45,
  45, 45, 49, 46, 46, 46, 43, 47, 47, 47, 43, 48, 48, 48, 44, 49, 49, 49, 47,
  50, 50, 50, 53, 51, 51, 51, 47, 52, 52, 52, 55, 53, 53, 53, 53, 54, 54, 54,
  56, 55, 55, 55, 59, 56, 56, 56, 56, 57, 57, 57, 61, 58, 58, 58, 58, 59, 59,
  59, 60, 60, 60, 60, 56, 61, 61, 61, 64, 62, 62, 62, 66, 63, 63, 63, 67, 64,
  64, 64, 67, 65, 65, 65, 61, 66, 66, 66, 63, 67, 67, 67, 66, 68, 68, 68, 72,
  69, 69, 69, 64, 70, 70, 70, 70, 71, 71, 71, 72, 72, 72, 72, 73, 73, 73, 73,
  71, 74, 74, 74, 72, 75, 75, 75, 79, 76, 76, 76, 80, 77, 77, 77, 79, 78, 78,
  78, 79, 79, 79, 79, 76, 80, 80, 80, 82, 81, 81, 81, 81, 82, 82, 82, 77, 83,
  83, 83, 84, 84, 84, 84, 88, 85, 85, 85, 83, 86, 86, 86, 83, 87, 87, 87, 90,
  88, 88, 88, 83, 89, 89, 89, 87, 90, 90, 90, 87, 90, 90, 90, 94, 90, 90, 90,
  86, 90, 90, 90, 94, 90, 90, 90, 86, 90, 90, 90, 88, 90, 90, 90, 93, 90, 90,
  90, 89, 90, 90, 90, 91, 90, 90, 90, 89, 90, 90, 90, 93, 90, 90, 90, 89, 90,
  90, 90, 91, 90, 90, 90, 89, 90, 90, 90, 89, 90, 90, 90, 86, 90, 90, 90, 93,
  90, 90, 90, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
  86, 90, 90, 90, 92, 90, 90, 90, 87, 90, 90, 90, 86, 90, 90, 90, 90, 90, 90,
  90, 88, 90, 90, 90, 89, 90, 90, 90, 89, 90, 90, 90, 94, 90, 90, 90, 93, 90,
  90, 90, 88, 90, 90, 90, 87, 90, 90, 90, 94, 90, 90, 90, 92, 90, 90, 90, 87,
  90, 90, 90, 91, 90, 90, 90, 92, 90, 90, 90, 87, 90, 90, 90, 89, 90, 90, 90,
  91, 90, 90, 90, 91, 90, 90, 90, 90, 90, 90, 90, 94, 90, 90, 90, 86, 90, 90,
  90, 88, 90, 90, 90, 93, 90, 90, 90, 94, 90, 90, 90, 92, 90, 90, 90, 88, 90,
  90, 90, 86, 90, 90, 90, 89, 90, 90, 90, 93, 90, 90, 90, 89, 90, 90, 90, 93,
  90, 90, 90, 92, 90, 90, 90, 94, 90, 90, 90, 94, 90, 90, 90, 90, 90, 90, 90,
  87, 90, 90, 90, 86, 90, 90, 90, 90, 90, 90, 90, 86, 90, 90, 90, 87, 90, 90,
  90, 92, 90, 90, 90, 88, 90, 90, 90, 88, 90, 90, 90, 85, 90, 90, 90, 91, 90,
  90, 90, 92, 90, 90, 90, 85, 90, 90, 90, 93, 90, 90, 90, 86, 90, 90, 90, 92,
  90, 90, 90, 91, 90, 90, 90, 91, 90, 90, 90, 94, 90, 90, 90, 91, 90, 90, 90,
  92, 90, 90, 90, 94, 90, 90, 90, 89, 90, 90, 90, 88, 90, 90, 90, 93, 90, 90,
  90, 93, 90, 90, 90, 86, 90, 90, 90, 93, 90, 90, 90, 89, 90, 90, 90, 85, 90,
  90, 90, 90, 90, 90, 90, 87, 90, 90, 90, 91, 90, 90, 90, 91, 90, 90, 90, 87,
  90, 90, 90, 85, 90, 90, 90, 91, 90, 90, 90, 87, 90, 90, 90, 93, 90, 90, 90,
  90, 90, 90, 90, 90, 90, 90, 90, 87, 90, 90, 90, 85, 90, 90, 90, 90, 90, 90,
  90, 92, 90, 90, 90, 90, 90, 90, 90, 87, 90, 90, 90, 89, 90, 90, 90, 86, 90,
  90, 90, 87, 90, 90, 90, 91, 90, 90, 90, 86, 90, 90, 90, 93, 90, 90, 90, 87,
  90, 90, 90, 91, 90, 90, 90, 86, 90, 90, 90, 91, 90, 90, 90, 90, 90, 90, 90,
  93, 90, 90, 90, 92, 90, 90, 90, 92, 90, 90, 90, 91, 90, 90, 90, 92, 90, 90,
  90, 90, 90, 90, 90, 93, 90, 90, 90, 92, 90, 90, 90, 87, 90, 90, 90, 85, 90,
  90, 90, 94, 90, 90, 90, 91, 90, 90, 90, 89, 90, 90, 90, 85, 90, 90, 90, 86,
  90, 90, 90, 94, 90, 90, 90, 88, 90, 90, 90, 91, 90, 90, 90, 91, 90, 90, 90,
  87, 90, 90, 90, 90, 90, 90, 90, 93, 90, 90, 90, 88, 90, 90, 90, 88, 90, 90,
  90, 90, 90, 90, 90, 87, 90, 90, 90, 87, 90, 90, 90, 92, 90, 90, 90, 94, 90,
  90, 90, 87, 90, 90, 90, 86, 90, 90, 90, 94, 90, 90, 90, 91, 90, 90, 90, 86,
  90, 90, 90, 86, 90, 90, 90, 88, 90, 90, 90, 89, 90, 90, 90, 94, 90, 90, 90,
  88, 90, 90, 90, 91, 90, 90, 90, 88, 90, 90, 90, 88, 90, 90, 90, 92, 90, 90,
  90, 92, 90, 90, 90, 86, 90, 90, 90, 93, 90, 90, 90, 89, 90, 90, 90, 92, 90,
  90, 90, 91, 90, 90, 90, 87, 90, 90, 90, 89, 90, 90, 90, 91, 90, 90, 90, 90,
  90, 90, 90, 89, 90, 90, 90, 93, 90, 90, 90, 89, 90, 90, 90, 92, 90, 90, 90,
  93, 90, 90, 90, 87, 90, 90, 90, 86, 90, 90, 90, 87, 90, 90, 90, 94, 90, 90,
  90, 85, 90, 90, 90, 89, 90, 90, 90, 93, 91, 91, 91, 93, 92, 92, 92, 87, 93,
  93, 93, 96, 94, 94, 94, 98, 95, 95, 95, 97, 96, 96, 96, 99, 97, 97, 97, 96,
  98, 98, 98, 98, 99, 99, 99, 100, 100, 100, 100, 99, 101, 101, 101, 98, 102,
  102, 102, 102, 103, 103, 103, 100, 104, 104, 104, 104, 105, 105, 105, 109,
  106, 106, 106, 101, 107, 107, 107, 108, 108, 108, 108, 107, 109, 109, 109,
  111, 110, 110, 110, 109, 111, 111, 111, 110, 112, 112, 112, 110, 113, 113,
  113, 115, 114, 114, 114, 110, 115, 115, 115, 115, 116, 116, 116, 119, 117,
  117, 117, 115, 118, 118, 118, 118, 119, 119, 119, 122, 120, 120, 120, 123,
  121, 121, 121, 118, 122, 122, 122, 125, 123, 123, 123, 120, 124, 124, 124,
  123,
];

const rpmMock = [
  0, 17, 43, 65, 98, 170, 252, 334, 407, 470, 496, 576, 618, 634, 656, 722, 743,
  820, 851, 908, 981, 1035, 1104, 1150, 1183, 1211, 1296, 1348, 1429, 1511,
  1576, 1650, 1715, 1762, 1819, 1894, 1965, 2019, 2073, 2112, 2147, 2179, 2224,
  2304, 2346, 2431, 2484, 2562, 2633, 2718, 2802, 2887, 2936, 2989, 3051, 3138,
  3177, 3262, 3345, 3362, 3448, 3530, 3616, 3658, 3693, 3744, 3797, 3818, 3856,
  3876, 3901, 3921, 3973, 3996, 4075, 4157, 4241, 4305, 4387, 4437, 4451, 4466,
  4492, 4510, 4531, 4546, 4581, 4648, 4703, 4759, 4838, 4883, 4898, 4963, 5016,
  5064, 5136, 5154, 5178, 5178, 5154, 5136, 5064, 5016, 4963, 4898, 4883, 4838,
  4759, 4703, 4648, 4581, 4546, 4531, 4510, 4492, 4466, 4451, 4437, 4387, 4305,
  4241, 4157, 4075, 3996, 3973, 3921, 3901, 3876, 3856, 3818, 3797, 3744, 3693,
  3658, 3616, 3530, 3448, 3362, 3345, 3262, 3177, 3138, 3051, 2989, 2936, 2887,
  2802, 2718, 2633, 2562, 2484, 2431, 2346, 2304, 2224, 2179, 2147, 2112, 2073,
  2019, 1965, 1894, 1819, 1762, 1715, 1650, 1576, 1511, 1429, 1348, 1296, 1211,
  1183, 1150, 1104, 1035, 981, 908, 851, 820, 743, 722, 656, 634, 618, 576, 496,
  470, 407, 334, 252, 170, 98, 65, 43, 17, 0,
];

const speedMock = [
  0, 1, 3, 5, 6, 7, 9, 10, 12, 14, 16, 18, 19, 21, 22, 24, 26, 27, 28, 29, 30,
  32, 34, 36, 38, 40, 41, 42, 44, 46, 47, 49, 50, 52, 53, 55, 57, 58, 60, 62,
  63, 65, 66, 68, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 85, 87, 89, 91,
  92, 94, 95, 97, 99, 100, 101, 103, 105, 107, 109, 109, 107, 105, 103, 101,
  100, 99, 97, 95, 94, 92, 91, 89, 87, 85, 84, 82, 81, 80, 78, 77, 75, 74, 73,
  72, 70, 68, 66, 65, 63, 62, 60, 58, 57, 55, 53, 52, 50, 49, 47, 46, 44, 42,
  41, 40, 38, 36, 34, 32, 30, 29, 28, 27, 26, 24, 22, 21, 19, 18, 16, 14, 12,
  10, 9, 7, 6, 5, 3, 1, 0,
];

const fuelMock = [
  0, 0, 0, 1, 1, 1, 2, 2, 2, 4, 4, 4, 6, 6, 6, 7, 7, 7, 9, 9, 9, 10, 10, 10, 12,
  12, 12, 13, 13, 13, 15, 15, 15, 17, 17, 17, 18, 18, 18, 20, 20, 20, 21, 21,
  21, 22, 22, 22, 24, 24, 24, 26, 26, 26, 27, 27, 27, 29, 29, 29, 31, 31, 31,
  32, 32, 32, 33, 33, 33, 35, 35, 35, 36, 36, 36, 37, 37, 37, 39, 39, 39, 40,
  40, 40, 41, 41, 41, 43, 43, 43, 45, 45, 45, 46, 46, 46, 48, 48, 48, 49, 49,
  49, 50, 50, 50, 51, 51, 51, 52, 52, 52, 54, 54, 54, 56, 56, 56, 58, 58, 58,
  59, 59, 59, 60, 60, 60, 61, 61, 61, 63, 63, 63, 65, 65, 65, 67, 67, 67, 68,
  68, 68, 70, 70, 70, 72, 72, 72, 73, 73, 73, 74, 74, 74, 75, 75, 75, 76, 76,
  76, 78, 78, 78, 80, 80, 80, 82, 82, 82, 83, 83, 83, 84, 84, 84, 85, 85, 85,
  87, 87, 87, 89, 89, 89, 90, 90, 90, 91, 91, 91, 93, 93, 93, 95, 95, 95, 96,
  96, 96, 97, 97, 97, 99, 99, 99, 99, 99, 99, 97, 97, 97, 96, 96, 96, 95, 95,
  95, 93, 93, 93, 91, 91, 91, 90, 90, 90, 89, 89, 89, 87, 87, 87, 85, 85, 85,
  84, 84, 84, 83, 83, 83, 82, 82, 82, 80, 80, 80, 78, 78, 78, 76, 76, 76, 75,
  75, 75, 74, 74, 74, 73, 73, 73, 72, 72, 72, 70, 70, 70, 68, 68, 68, 67, 67,
  67, 65, 65, 65, 63, 63, 63, 61, 61, 61, 60, 60, 60, 59, 59, 59, 58, 58, 58,
  56, 56, 56, 54, 54, 54, 52, 52, 52, 51, 51, 51, 50, 50, 50, 49, 49, 49, 48,
  48, 48, 46, 46, 46, 45, 45, 45, 43, 43, 43, 41, 41, 41, 40, 40, 40, 39, 39,
  39, 37, 37, 37, 36, 36, 36, 35, 35, 35, 33, 33, 33, 32, 32, 32, 31, 31, 31,
  29, 29, 29, 27, 27, 27, 26, 26, 26, 24, 24, 24, 22, 22, 22, 21, 21, 21, 20,
  20, 20, 18, 18, 18, 17, 17, 17, 15, 15, 15, 13, 13, 13, 12, 12, 12, 10, 10,
  10, 9, 9, 9, 7, 7, 7, 6, 6, 6, 4, 4, 4, 2, 2, 2, 1, 1, 1, 0, 0, 0,
];

const legMock = [
  100, 100, 100, 100, 100, 100, 100, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91,
  90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72,
  71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53,
  52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34,
  33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15,
  14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
  2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
  23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
  42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
  61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
  80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
  99, 100,
];
